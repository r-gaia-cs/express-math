/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EvaluationView.java
 *
 * Created on Oct 23, 2012, 11:53:22 PM
 */

package br.usp.ime.faguilar.guis;

import br.usp.ime.faguilar.classification.Classifible;
import br.usp.ime.faguilar.classification.ClassificationResult;
import br.usp.ime.faguilar.classification.Classifier;
import br.usp.ime.faguilar.classification.ShapeContextClassifier;
import br.usp.ime.faguilar.conversion.InkMLInput;
import br.usp.ime.faguilar.conversion.MathExpressionGraph;
import br.usp.ime.faguilar.data.DStroke;
import br.usp.ime.faguilar.export.InkMLExpression;
import br.usp.ime.faguilar.export.MathExpressionSample;
import br.usp.ime.faguilar.feature_extraction.PreprocessingAlgorithms;
import br.usp.ime.faguilar.graphics.GMathExpression;
import br.usp.ime.faguilar.graphics.GraphicalStrokeKruskalMST;
import br.usp.ime.faguilar.segmentation.Segmentation;
import br.usp.ime.faguilar.segmentation.SegmentationResult;
import br.usp.ime.faguilar.segmentation.TreeSearchSegmentation;
import br.usp.ime.faguilar.util.FilesUtil;
import br.usp.ime.faguilar.util.SymbolUtil;
import edu.princeton.cs.algs4.Edge;
import edu.princeton.cs.algs4.EdgeWeightedGraph;
import edu.princeton.cs.algs4.KruskalMST;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.DefaultListModel;

/**
 *
 * @author frank
 */
public class EvaluationView extends javax.swing.JPanel {
    public static final String INKML_DIR = "data/inkml-complete/";
    public static final String TEMPLATES_DIR = "data/templates/";
//    public static final String TEMPLATES_FILE = TEMPLATES_DIR + "part-model-symbols_v3.txt";
    public static final String TEMPLATES_FILE = TEMPLATES_DIR + "first-test.txt";//"model-symbols.txt";
    public static final String TRAINING_FILES = INKML_DIR + "training-training.txt";
    private Segmentation segmentation;
    private String SelectedFileName;

    private KruskalMST mst;
    private EdgeWeightedGraph StrokeSetToEdgeWeightedGraph;
    private Classifier classifier;
    private ArrayList<DStroke> strokes;

    private boolean fileSelected;
    /** Creates new form EvaluationView */
    public EvaluationView() {
        initComponents();
        localInitialization();
//        chargeFileNames();
    }

    private void localInitialization() {
        chargeFileNames();
        ArrayList<Classifible> classifibles = SymbolUtil.readSymbolData(TEMPLATES_FILE);
        classifier = new ShapeContextClassifier();
        classifier.setTrainingData(classifibles);
        classifier.train();
//        segmentation =  new TreeSearchSegmentation(); //new Segmentation();
//        segmentation.setClassifier(classifier);
        fileSelected = false;
    }
    
    private void chargeFileNames(){
        String fileContent = FilesUtil.getContentAsString(EvaluationView.TRAINING_FILES);
        String[] trainingFiles = fileContent.split("\n");
        ArrayList<String> inkFiles = new  ArrayList();
        inkFiles.addAll(Arrays.asList(trainingFiles));
        Collections.sort(inkFiles);
        DefaultListModel listModel = new DefaultListModel();
        for (String string : inkFiles) {
            listModel.addElement(string);
        }
        fileNames.setModel(listModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        distanceFilter = new javax.swing.JCheckBox();
        mstFilter = new javax.swing.JCheckBox();
        showMST = new javax.swing.JCheckBox();
        useTree = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        drawingArea2 = new br.usp.ime.faguilar.guis.DrawingArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileNames = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(150);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        log.setColumns(20);
        log.setRows(5);
        jScrollPane2.setViewportView(log);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jButton1.setText("run");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        distanceFilter.setText("Distance filter");

        mstFilter.setText("MST filter");

        showMST.setText("Show MST");
        showMST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showMSTMouseClicked(evt);
            }
        });

        useTree.setText("Use Tree");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(distanceFilter)
                .add(55, 55, 55)
                .add(mstFilter)
                .add(36, 36, 36)
                .add(showMST)
                .add(44, 44, 44)
                .add(useTree)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 130, Short.MAX_VALUE)
                .add(jButton1)
                .add(21, 21, 21))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(distanceFilter)
                    .add(mstFilter)
                    .add(showMST)
                    .add(useTree))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        org.jdesktop.layout.GroupLayout drawingArea2Layout = new org.jdesktop.layout.GroupLayout(drawingArea2);
        drawingArea2.setLayout(drawingArea2Layout);
        drawingArea2Layout.setHorizontalGroup(
            drawingArea2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 2200, Short.MAX_VALUE)
        );
        drawingArea2Layout.setVerticalGroup(
            drawingArea2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 385, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(drawingArea2);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        fileNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileNamesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fileNames);

        jSplitPane1.setLeftComponent(jScrollPane1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void fileNamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fileNamesValueChanged
        // TODO add your handling code here:
        if(!evt.getValueIsAdjusting()){
            int selectedIndex = fileNames.getSelectedIndex();
            SelectedFileName = (String) fileNames.getModel().getElementAt(selectedIndex);
            showMathExpression();
//            executeSegmentationAndClassification();
//            updateMathExpression();
        }
    }//GEN-LAST:event_fileNamesValueChanged

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        executeSegmentationAndClassification();
//        updateMathExpression();
    }//GEN-LAST:event_jButton1MouseClicked

    private void showMSTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showMSTMouseClicked
        // TODO add your handling code here:
        if(fileSelected){
            drawingArea2.getDrawingObject().setDrawGraph(showMST.isSelected());
            drawingArea2.repaint();
        }
    }//GEN-LAST:event_showMSTMouseClicked

    
    private void updateMathExpression(){
//            int selectedIndex = fileNames.getSelectedIndex();
//            String selectedFileName = (String) fileNames.getModel().getElementAt(selectedIndex);
//            InkMLInput inkMlInput = new InkMLInput();
//            ArrayList<DStroke> strokes = inkMlInput.extractStrokesFromInkMLFile(
//                    INKML_DIR+selectedFileName);
//            strokes = PreprocessingAlgorithms.preprocessStrokes(strokes);
//            EdgeWeightedGraph StrokeSetToEdgeWeightedGraph =
//                MathExpressionGraph.StrokeSetToEdgeWeightedGraph(strokes);
//
//            KruskalMST mst = new KruskalMST(StrokeSetToEdgeWeightedGraph);
//            double meandistance = 0;
//            double alpha = 1;
//            for(Edge e: mst.edges())
//                meandistance += e.weight();
//            meandistance = alpha*(meandistance / StrokeSetToEdgeWeightedGraph.V() - 1);
//            boolean filterByDistance = distanceFilter.isSelected();
//            segmentation.setTruncateByDistance(filterByDistance);
//            segmentation.setMaxDistanceBetweenStrokes(meandistance);
//            boolean filterByMST = mstFilter.isSelected();
//            segmentation.setTruncateByMST(filterByMST);
//            segmentation.setMst(mst);
//            segmentation.part(strokes);
//
////            System.out.println(segmentation.getResult());
////            SegmentationResult resultClass = segmentation.getResult();
////            System.out.println(resultClass);
//
//            GraphicalStrokeKruskalMST graphicalObject =
//                    new GraphicalStrokeKruskalMST();
//            graphicalObject.setMst(mst);
//            graphicalObject.setStrokes(strokes);
//            GMathExpression expression = (GMathExpression) segmentation.getPartitionAsDMathExpression();
//            expression.setDrawnWithBBox(true);
//            expression.setDrawnWithLabels(true);
//            graphicalObject.setMathExpression(expression);
//            this.drawingArea2.setDrawingObject(graphicalObject);
//
//            drawingArea2.repaint();
//            String logResult = "Number of symbol evaluations: " +
//                    String.valueOf(segmentation.getNumberOfSymbolEvaluations());
//            addResultToLog(logResult);
    }

    private void executeSegmentationAndClassification(){
        double meandistance = 0;
        double filterMaxDistance;
        double alpha = 0.8;
        double beta = 0.6;
        for(Edge e: mst.edges())
            meandistance += e.weight();
        meandistance = meandistance / (StrokeSetToEdgeWeightedGraph.V() - 1);
        filterMaxDistance = alpha * meandistance;
        double mindistance = beta * meandistance;
        if(useTree.isSelected()){
            segmentation =  new TreeSearchSegmentation();
            ((TreeSearchSegmentation) segmentation).setMinDist(mindistance);
        }
        else
            segmentation =  new Segmentation();            
        segmentation.setClassifier(classifier);
        boolean filterByDistance = distanceFilter.isSelected();
        segmentation.setTruncateByDistance(filterByDistance);
        segmentation.setMaxDistanceBetweenStrokes(filterMaxDistance);
        boolean filterByMST = mstFilter.isSelected();
        segmentation.setTruncateByMST(filterByMST);
        segmentation.setMst(mst);
        segmentation.part(strokes);

        GMathExpression expression = (GMathExpression) segmentation.getPartitionAsDMathExpression();

        //to show inkml
//        MathExpressionSample sample=new MathExpressionSample(
//        "id model",
//        "nickname",expression);
//        sample.setTextualRepresentation(null);
//        sample.setCategory("cat");
//
//        InkMLExpression inkMlExpression = new InkMLExpression();
//            inkMlExpression.setGroundTruthExpression(sample.getTextualRepresentation());
//            inkMlExpression.setSampleExpression(sample);
//            inkMlExpression.generateInkML();
//            String inkmlTex = inkMlExpression.getInkmlText();
////            count++;
//            FilesUtil.write(INKML_DIR + SelectedFileName.substring(0, SelectedFileName.length() - 6)
//                    + "-res.inkml", inkmlTex);

        // end to show inkml


        expression.setDrawnWithBBox(true);
        expression.setDrawnWithLabels(true);
        drawingArea2.getDrawingObject().setMathExpression(expression);
        drawingArea2.getDrawingObject().setDrawType(GraphicalStrokeKruskalMST.DRAW_TYPE_EXPRESSION);
        drawingArea2.repaint();
        String logResult = "Number of symbol evaluations: " +
        String.valueOf(segmentation.getNumberOfSymbolEvaluations());
        addResultToLog(logResult);
    }

    private void showMathExpression(){
        String inkmlFileName = SelectedFileName;
        if(!fileSelected){
            fileSelected = true;
            if(drawingArea2.getDrawingObject() == null){
            GraphicalStrokeKruskalMST graphicalObject =
                new GraphicalStrokeKruskalMST();
            drawingArea2.setDrawingObject(graphicalObject);
            }
        }
        InkMLInput inkMlInput = new InkMLInput();
        strokes = inkMlInput.extractStrokesFromInkMLFile(
                INKML_DIR + inkmlFileName);
        strokes = PreprocessingAlgorithms.preprocessStrokes(strokes);
        StrokeSetToEdgeWeightedGraph =
            MathExpressionGraph.StrokeSetToEdgeWeightedGraph(strokes);
        
        mst = new KruskalMST(StrokeSetToEdgeWeightedGraph);
//        printShortEdges();
        
        drawingArea2.getDrawingObject().setMst(mst);
        drawingArea2.getDrawingObject().setStrokes(strokes);
        drawingArea2.getDrawingObject().setDrawType(GraphicalStrokeKruskalMST.DRAW_TYPE_STROKES);
//        this.drawingArea2.setDrawingObject(drawingArea2.getDrawingObject());

        drawingArea2.repaint();
    }
    
    private void printShortEdges(){
        double distanceThreashold = 0;
        double alpha = 0.8;
        System.out.println("Short edges:");
        for(Edge e: mst.edges())
            distanceThreashold += e.weight();
        distanceThreashold = alpha*(distanceThreashold / StrokeSetToEdgeWeightedGraph.V() - 1);
        for(Edge e: mst.edges()){
            if(e.weight() < distanceThreashold)
                System.out.printf("Edge (%d, %d) \n", e.either(), e.other(e.either()));
        }
    }

    
    private void addResultToLog(String stringResult){
        log.append(stringResult + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox distanceFilter;
    private br.usp.ime.faguilar.guis.DrawingArea drawingArea2;
    private javax.swing.JList fileNames;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea log;
    private javax.swing.JCheckBox mstFilter;
    private javax.swing.JCheckBox showMST;
    private javax.swing.JCheckBox useTree;
    // End of variables declaration//GEN-END:variables

    

}
